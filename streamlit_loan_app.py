# -*- coding: utf-8 -*-
"""Streamlit_loan_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BdjUN3hZUlyp5lIstU6-tIntb_eSC_uk
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.tree import DecisionTreeClassifier

# Load the saved components
with open('dt_model.pkl', 'rb') as model_file:
    dt_model = pickle.load(model_file)

with open('scaler.pkl', 'rb') as scaler_file:
    scaler = pickle.load(scaler_file)

with open('smote.pkl', 'rb') as smote_file:
    smote = pickle.load(smote_file)

with open('label_mappings.pkl', 'rb') as label_mappings_file:
    label_mappings = pickle.load(label_mappings_file)

# Function to preprocess the input data
def preprocess_data(df, label_mappings):
    # Convert categorical variables to numeric
    for var, mapping in label_mappings.items():
        df[var] = df[var].map(mapping)

    # Identify numeric columns and convert to numeric
    numeric_cols = ['rate_of_interest', 'Interest_rate_spread', 'Upfront_charges', 'term',
                    'property_value', 'income', 'LTV', 'dtir1', 'Credit_Score']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # Impute missing values
    imputer = SimpleImputer(strategy='most_frequent')
    df = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)

    return df

# Streamlit UI
st.title('Loan Prediction App')
uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    # Preprocess the data
    X = df.drop('Status', axis=1, errors='ignore')  # Ignore if 'Status' column is not present
    y = df['Status'] if 'Status' in df.columns else None  # Optional target variable

    X = preprocess_data(X, label_mappings)

    # Scale the features
    X_scaled = scaler.transform(X)

    # If SMOTE was used during training, it should not be applied during inference
    # Use the model to make predictions
    predictions = dt_model.predict(X_scaled)

    # Add predictions to the dataframe
    df['Predicted Status'] = predictions

    # Display the results
    st.write(df)

    # Download the results as CSV
    st.download_button(
        label="Download predictions as CSV",
        data=df.to_csv(index=False).encode('utf-8'),
        file_name='predictions.csv',
        mime='text/csv'
    )

